// Feel free to use this java file as a template and extend it to write your solver.
// ---------------------------------------------------------------------------------

import world.Robot;
import world.World;

import java.awt.*;
import java.awt.List;
import java.util.*;

public class MyRobot extends Robot {
	private static World myWorld;
	private Point start;
	private Point goal;
    private boolean isUncertain;
    private int [][] displacement= new int[][] {
    	{0,1},
    	{0,-1},
    	{1,-1},
    	{1,0},
    	{1,1},
    	{-1,-1},
    	{-1,0},
    	{-1,1},
    };
	
    @Override
    public void travelToDestination() {
        if (isUncertain) {
			// call function to deal with uncertainty
        	ArrayList<Node> l=new ArrayList<Node>();
        	Node last = uncertain();
        	if (last==null) {
        		System.out.println("The goal cannot be reached!");
        	}
        	else {
        		l.add(last);
        		while (!last.getParent().getSelf().equals(start)) {
        			last = last.getParent();
        			l.add(last);
        		}
        		for (int i=l.size()-1;i>=0;i--) {
        			move(l.get(i).getSelf());
        		}
        	}
        }
        else {
			// call function to deal with certainty
        	ArrayList<Node> l=new ArrayList<Node>();
        	Node last = astar();
        	if (last==null) {
        		System.out.println("The goal cannot be reached!");
        	}
        	else {
        		l.add(last);
        		while (!last.getParent().getSelf().equals(start)) {
        			last = last.getParent();
        			l.add(last);
        		}
        		for (int i=l.size()-1;i>=0;i--) {
        			move(l.get(i).getSelf());
        		}
        	}
        }
    }

    @Override
    public void addToWorld(World world) {
        isUncertain = world.getUncertain();
        super.addToWorld(world);
    }
    

    public Node astar() {
        PriorityQueue<Node> open = new PriorityQueue<Node>(100, new NodeComparator());
    	ArrayList<Node> visited = new ArrayList<Node>();
    	Node current = new Node(start,null, distance(start) ,0);   
    	open.add(current);
    	while (!open.isEmpty()) {
    		current = open.poll();
    		visited.add(current);
    		for (int i = 0; i < 8; i++) {
    			int new_x = current.getSelf().x+displacement[i][0];
    			int new_y = current.getSelf().y+displacement[i][1];
    			if (((0<=new_x)&&(new_x<myWorld.numRows()))&&((0<=new_y)&&(new_y<myWorld.numCols()))) {
    				Point p= new Point(new_x,new_y);
    				if (!pingMap(p).equals("X")) {
    					Node next= new Node(p,current, current.getSteps()+distance(p),current.getSteps()+1);
    					if ((!next.inopen(open))&&(!next.invisited(visited))) {
    						open.add(next);
    						if (pingMap(p).equals("F")) return next;
    					}
    				}
    			}
    			
    		}
    	}
    	return null;
    }
    
    public Node uncertain() {
    	char [][] record=new char [myWorld.numRows()][myWorld.numCols()];
    	
        PriorityQueue<Node> open = new PriorityQueue<Node>(100, new NodeComparator());
    	ArrayList<Node> visited = new ArrayList<Node>();
    	Node current = new Node(start,null, distance(start) ,0);   
    	open.add(current);
    	while (!open.isEmpty()) {
    		current = open.poll();
    		visited.add(current);
    		for (int i = 0; i < 8; i++) {
    			int new_x = current.getSelf().x+displacement[i][0];
    			int new_y = current.getSelf().y+displacement[i][1];
    			if (myWorld.getEndPos().x == new_x && myWorld.getEndPos().y == new_y) {
    				Point p= new Point(new_x,new_y);
					Node next= new Node(p,current, current.getSteps()+distance(p),current.getSteps()+1);
					return next;
    			}
    			if (((0<=new_x)&&(new_x<myWorld.numRows()))&&((0<=new_y)&&(new_y<myWorld.numCols()))) {
    				Point p= new Point(new_x,new_y);
    				char flag='a';
    				if (record[p.x][p.y]!='\0') {
    					flag=record[p.x][p.y];
    				} else {
    					int b=0,c=0,f=0;
    					
    					for (int k=0;k<501;k++) {
    						if (pingMap(p).equals("X")) {
    							b++;
    						} else {
    							c++;
    						}
    					}
    						flag=b>c ? 'X':'O';
    						record[p.x][p.y]=flag;
    						
    				}
    				if (!(flag=='X')) {
    					Node next= new Node(p,current, current.getSteps()+distance(p),current.getSteps()+1);
    					if ((!next.inopen(open))&&(!next.invisited(visited))) {
    						open.add(next);
//    						if (pingMap(p).equals("F")) return next;
    					}
    				}
    			}
    			
    		}
    	}
    	return null;
    }
    // Modified Manhattan Distance for diagonal movement
    public double distance(Point point) {
    	double x_dist = Math.abs(point.getX() - goal.getX());
    	double y_dist = Math.abs(point.getY() - goal.getY());
    	return Math.max(x_dist, y_dist);
    }
    
    public static void main(String[] args) {
        try {
        	// Uncertainty
			myWorld = new World("TestCases/myInputFile3.txt", true);
			
            MyRobot robot = new MyRobot();
            robot.addToWorld(myWorld);
            robot.start = robot.myWorld.getStartPos();
            robot.goal = robot.myWorld.getEndPos();
            
			myWorld.createGUI(400, 400, 200); // uncomment this and create a GUI; the last parameter is delay in msecs
			

			robot.travelToDestination();
        }

        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public class NodeComparator implements Comparator<Node>{
    	@Override
    	public int compare(Node x, Node y) {
    		if (x.getWeight() > y.getWeight()) {
    			return 1;
    		} else if (x.getWeight() < y.getWeight()) {
    			return -1;
    		}
    		return 0;
    	}
    }
    

}


