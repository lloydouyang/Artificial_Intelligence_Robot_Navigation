// Feel free to use this java file as a template and extend it to write your solver.
// ---------------------------------------------------------------------------------

import world.Robot;
import world.World;

import java.awt.*;
import java.awt.List;
import java.util.*;

public class MyRobot extends Robot {
	private World myWorld;
	private Point start;
	private Point goal;
    private boolean isUncertain;
    private int [][] displacement= new int[][] {
    	{0,1},
    	{0,-1},
    	{1,-1},
    	{1,0},
    	{1,1},
    	{-1,-1},
    	{-1,0},
    	{-1,1},
    };
	
    @Override
    public void travelToDestination() {
        if (isUncertain) {
			// call function to deal with uncertainty
        }
        else {
			// call function to deal with certainty
        }
    }

    @Override
    public void addToWorld(World world) {
        isUncertain = world.getUncertain();
        super.addToWorld(world);
    }
    
    public ArrayList<Node> adjacency(Node point){
    	ArrayList<Node> a = new ArrayList<Node>();
    	return a;
    }
    
    public boolean astar() {
        PriorityQueue<Node> open = new PriorityQueue<Node>(100, new NodeComparator());
    	ArrayList<Node> visited = new ArrayList<Node>();
    	Node current = new Node(start,null, distance(current),0);    	
    	open.add(current);
    	while (!open.isEmpty()) {
    		current = open.poll();
    		visited.add(current);
    		for (int i = 0; i < 8; i++) {
    			int new_x = current.getSelf().x+displacement[i][0];
    			int new_y = current.getSelf().y+displacement[i][1];
    			if (((0<=new_x)&&(new_x<=myWorld.numRows())&&((0<=new_y)&&(new_y<=myWorld.numCols())) {
    				Point p= new Point(new_x,new_y);
    			}
    		}
    		}
    	}
    	return true;
    }
    
    // Modified Manhatthan Distance for diagnoal movement
    public double distance(Node point) {
    	double x_dist = Math.abs(point.getSelf().getX() - goal.getX());
    	double y_dist = Math.abs(point.getSelf().getY() - goal.getY());
    	return Math.max(x_dist, y_dist);
    }
    
    public static void main(String[] args) {
        try {
        	// Uncertainty
			World myWorld = new World("TestCases/myInputFile1.txt", true);
			
            MyRobot robot = new MyRobot();
            robot.addToWorld(myWorld);
            robot.start = robot.myWorld.getStartPos();
            robot.goal = robot.myWorld.getEndPos();
            
			//myWorld.createGUI(400, 400, 200); // uncomment this and create a GUI; the last parameter is delay in msecs
			

			robot.travelToDestination();
        }

        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public class NodeComparator implements Comparator<Node>{
    	@Override
    	public int compare(Node x, Node y) {
    		if (x.getWeight() > y.getWeight()) {
    			return 1;
    		} else if (x.getWeight() < y.getWeight()) {
    			return -1;
    		}
    		return 0;
    	}
    }
    

}


